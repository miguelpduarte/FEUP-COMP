/* Generated By:JJTree: Do not edit this line. ASTAssignmentStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAssignmentStatement extends SimpleNode {
  public ASTAssignmentStatement(int id) {
    super(id);
  }

  public ASTAssignmentStatement(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return "=";
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {
    Node lhs_raw = children[0];
    if (!(lhs_raw instanceof ASTIdentifier || lhs_raw instanceof ASTArrayAccessExpression)) {
      throw new SemanticError(this.line, "Invalid left hand side of assignment (neither an identifier nor array access)");
    }

    VariableType lhs = ((Typed) lhs_raw).getType();
    VariableType rhs = ((Typed) children[1]).getType();

    if (!lhs.equals(rhs) && !(lhs.isIdentifier() && rhs.isIdentifier())){
      throw new SemanticError(this.line, String.format("Invalid assignment between types %s and %s", lhs, rhs));
    }

    if (lhs_raw instanceof ASTIdentifier) {
      ((ASTIdentifier) lhs_raw).getVariable().markAsInitialized();
    }
  }

  /**
   * Tests if a node is the left hand side of this assignment
   * @param n Node to test
   * @return True if the node is the LHS of the assignment, false otherwise
   */
  public boolean isLHS(Node n) {
    return n == children[0];
  }

  @Override
  protected void generateCodeNodeOpen(StringBuilder sb) {
    Node lhs_raw = children[0];
    if (lhs_raw instanceof ASTIdentifier) {
      // Storing the left hand side of an assignment
      Variable lhs = ((ASTIdentifier) lhs_raw).getVariable();
      if (lhs.isClassField()) {
        sb.append("\taload_0\n");
      }
    }
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    Node lhs_raw = children[0];
    if (lhs_raw instanceof ASTIdentifier) {
      // Storing the left hand side of an assignment
      Variable lhs = ((ASTIdentifier) lhs_raw).getVariable();

      sb.append(lhs.toJasminStore());
    } else if (lhs_raw instanceof ASTArrayAccessExpression) {
      // Storing the current operands that are in the stack in the given array (arrayref, index, value)
      // These values need not be calculated or loaded because such will already be done by the child nodes
      sb.append("\tiastore\n");
    }
  }

  /**
   * Tests if it is possible to use `iinc` instead of another value storing instruction (for higher efficiency)
   * @return True if `iinc` is usable, false otherwise
   */
  public boolean isIincAble() {
    // TODO
    return false;
  }

  public VariableType getLHSVarType() {
    Node lhs_raw = children[0];
    if (lhs_raw instanceof ASTIdentifier) {
      return ((ASTIdentifier) lhs_raw).getVariable().getType();
    } else if (lhs_raw instanceof ASTArrayAccessExpression) {
      return new VariableType("int[]");
    }

    // Never happens
    assert(false);
    return null;
  }
}
/* JavaCC - OriginalChecksum=f503663119aadd748782d6739471f263 (do not edit this line) */
