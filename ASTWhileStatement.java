/* Generated By:JJTree: Do not edit this line. ASTWhileStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTWhileStatement extends SimpleNode {
  private String endloop_label;
  private String loop_label;
  private boolean should_optimize = false;

  public ASTWhileStatement(int id) {
    super(id);
  }

  public ASTWhileStatement(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return "while";
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {
    VariableType lhs = ((Typed) children[0]).getType();

    if (!(lhs.isBoolean() || lhs.isIgnored())) {
      throw new SemanticError(this.line, String.format("Invalid type '%s' in While statement (expected boolean)", lhs));
    }
  }

  @Override
  protected void applyOptimizations() {
    
  }

  @Override
  protected void generateCodeNodeOpen(StringBuilder sb) {
    final int label_number = LabelGenerator.nextCustomLabelNr();
    this.endloop_label = "endloop_" + label_number;
    this.loop_label = "loop_" + label_number;

    sb.append(this.loop_label).append(":\n");
  }

  public String getLoopLabel() {
    return loop_label;
  }

  public String getEndLoopLabel() {
    return endloop_label;
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    sb.append(this.endloop_label).append(":\n");
  }
}
/* JavaCC - OriginalChecksum=bc101b754e6ad81cd1d346b016d5ce12 (do not edit this line) */
