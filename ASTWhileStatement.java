/* Generated By:JJTree: Do not edit this line. ASTWhileStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTWhileStatement extends SimpleNode {
  private String endloop_label;
  private String loop_label;
  private boolean should_optimize = false;

  public ASTWhileStatement(int id) {
    super(id);
  }

  public ASTWhileStatement(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return "while";
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {
    VariableType lhs = ((Typed) children[0]).getType();

    if (!(lhs.isBoolean() || lhs.isIgnored())) {
      throw new SemanticError(this.line, String.format("Invalid type '%s' in While statement (expected boolean)", lhs));
    }
  }

  public boolean shouldOptimize() {
    return this.should_optimize;
  }

  @Override
  protected void applyOptimizations() {
    Node condition_node = children[0];

    // Can optimize if the condition is simple
    // A condition is simple when it does not contain an '&&' and it has a small number of "propagated children" (less than 4 for the first two levels)

    if (condition_node instanceof ASTAndExpression) {
      this.should_optimize = false;
      return;
    }

    int n_propagated_children = condition_node.jjtGetNumChildren();
    for (int child_idx = 0; child_idx < condition_node.jjtGetNumChildren(); ++child_idx) {
      n_propagated_children += condition_node.jjtGetChild(child_idx).jjtGetNumChildren();
    }

    if (n_propagated_children < 4) {
      this.should_optimize = true;
      JMMParser.n_optimized_loops++;
    }
  }

  @Override
  protected void generateCodeNodeOpen(StringBuilder sb) {
    final int label_number = LabelGenerator.nextCustomLabelNr();
    this.endloop_label = "endloop_" + label_number;
    this.loop_label = "loop_" + label_number;

    if (!this.shouldOptimize()) {
      // Regular template. Otherwise the loop label is added in ASTWhileBody
      sb.append(this.loop_label).append(":\n");
    }
  }

  public String getLoopLabel() {
    return loop_label;
  }

  public String getEndLoopLabel() {
    return endloop_label;
  }

  public void generateConditionNodeCode(StringBuilder sb) {
    ((SimpleNode) children[0]).generateCode(sb);
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    sb.append(this.endloop_label).append(":\n");
  }
}
/* JavaCC - OriginalChecksum=bc101b754e6ad81cd1d346b016d5ce12 (do not edit this line) */
