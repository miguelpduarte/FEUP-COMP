/* Generated By:JJTree: Do not edit this line. ASTMainDeclaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMainDeclaration extends MethodDeclarationNode {
  protected String arg_name;

  public ASTMainDeclaration(int id) {
    super(id);
    // So that it can be used in the superclass
    this.name = "main";
    // The return value and identifier of main is always the same
    this.ret = new VariableType("void");
    this.identifier = new VariableIdentifier(this.name);
  }

  public ASTMainDeclaration(JMMParser p, int id) {
    super(p, id);
    // So that it can be used in the superclass
    this.name = "main";
    // The return value of main is always the same
    this.ret = new VariableType("void");
    this.identifier = new VariableIdentifier(this.name);
  }

  @Override
  protected void buildSymbolTable() {
    // Register method parameters because they are local reference
    for (Variable param : params) {
      this.registerInSymbolTable(param);
      param.markAsInitialized();  // main parameters are assumed to be initialized
      param.markAsParameter(); // Marking the parameter variables as parameters, useful for code generation
    }

    // First children are directly var declarations because the rest is always the same (return and args)
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        if (children[i] instanceof DeclarationNode) {
          this.registerInSymbolTable(children[i]);
        } else {
          // The declarations are all sequential in the start of the method code
          break;
        }
      }
    }

    final String method_identifier = this.getScopeIdentifier();
    SymbolTableScopes.getInstance().addMethodScope(method_identifier, this.line, this.symbol_table);
    MethodStackSizeScopes.getInstance().addMethodScope(method_identifier, this.line);
  }

  @Override
  public void prepareInternalInfo() {
    this.params = new Variable[] {new Variable(new VariableType("String[]"), new VariableIdentifier(this.arg_name))};
  }

  @Override
  protected void generateCodeNodeOpen(StringBuilder sb) {
    sb.append(".method public static main([Ljava/lang/String;)V\n");
    
    this.generateParametersAndLocalsCode(sb);
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    sb.append("\treturn\n")
      .append(".end method\n\n");
  }
}
/* JavaCC - OriginalChecksum=8a4e52ddec71c519a361c616e3c2c9f6 (do not edit this line) */
