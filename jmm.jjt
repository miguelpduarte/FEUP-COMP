options {
    MULTI=true;
    LOOKAHEAD=1;
}

PARSER_BEGIN(JMMParser)

public class JMMParser {
    public static void main(String args[]) throws ParseException {
        JMMParser parser = new JMMParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
    }
}

PARSER_END(JMMParser)

JAVACODE
void recover_while_error() {
    ParseException e = generateParseException();
    System.out.println(e.toString()); 
    Token t;

    //skip tokens until first parenthesis is reacherd 
    do {
        t = getNextToken();
    } while (t.kind != ParenthesisEnd);

    //skip extra parenthesis
    while (getToken(1).kind == ParenthesisEnd) {
        t = getNextToken();
    }
}

SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : MULTILINE_COMMENT_STATE
}

<MULTILINE_COMMENT_STATE> SKIP :
{
      < "*/" > : DEFAULT
    | < ~[] >
}

TOKEN :
{
    <IntegerLiteral:
          <DecimalLiteral> (["l","L"])?
        | <HexLiteral> (["l","L"])?
        | <OctalLiteral> (["l","L"])?
    >
    | <#DecimalLiteral: <NonZeroDigit> (<Digit>)* >
    | <#HexLiteral: "0" ["x","X"] (<HexDigit>)+ >
    | <#OctalLiteral: "0" (<OctalDigit>)* >

    | <#Digit: ["0" - "9"] >
    | <#HexDigit: ["0"-"9","a"-"f","A"-"F"] >
    | <#OctalDigit: ["0"-"7"] >
    | <#NonZeroDigit: ["1" - "9"] >

    | <AndOp: "&&" >
    | <LessThanOp: "<" >
    | <AddSubOp: ("+" | "-") >
    | <MultDivOp: ("*" | "/") >
    | <NotOp: "!" >
    | <DotOp: "." >

    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <TypeString: "String" >
    | <Class: "class" >
    | <Generalization: "extends" >
    | <Public: "public" >
    | <Static: "static" >
    | <Void: "void" >
    | <Main: "main" >
    | <Return: "return" >
    | <Length: "length" >
    | <True: "true" >
    | <False: "false" >
    | <This: "this" >
    | <New: "new" >
    | <If: "if" >
    | <Else: "else" >
    | <While: "while" >

    | <Identifier: <FullAlpha> (<FullAlpha> | <Digit>)* >
    | <#FullAlpha: (<Alpha> | "_" | "$") >
    | <#Alpha: (<LowerCase> | <UpperCase>) >
    | <#LowerCase: ["a"-"z"] >
    | <#UpperCase: ["A"-"Z"] >

    | <BlockStart: "{" >
    | <BlockEnd: "}" >
    | <ParenthesisStart: "(" >
    | <ParenthesisEnd: ")" >
    | <ArrayStart: "[" >
    | <ArrayEnd: "]" >    
    | <Semicolon: ";" >
    | <Comma: "," >
    | <Equals: "=" >
}

SimpleNode Program() : {} {
    ClassDeclaration()
    <EOF>
    { return jjtThis; }
}

void VarDeclaration() : {ASTType return_type; Token t_id;} {
    return_type = Type() t_id = <Identifier> <Semicolon>
    {
        jjtThis.identifier = t_id.image;
        jjtThis.type = return_type;
    }
}

void ClassDeclaration() : {Token t_id, t_parent_id;} {
    <Class> t_id = <Identifier> {jjtThis.identifier = t_id.image;} (t_parent_id = ClassGeneralization() {jjtThis.parent_identifier = t_parent_id.image;} )?
    <BlockStart>
        ClassBody()
    <BlockEnd>
}

Token ClassGeneralization() : {Token t_id;} {
    <Generalization> t_id = <Identifier>
    {
        return t_id;
    }
}

void ClassBody() : {} {
    (VarDeclaration())*
    (<Public> (MainDeclaration() | MethodDeclaration()))*
}

ASTType Type() : {Token t_type; boolean is_array = false;} {
    (
          (t_type = <TypeInt> (Array(){is_array = true;})?)
        | t_type = <TypeBoolean>
        | t_type = <Identifier>
    )
    {
        jjtThis.type = t_type.image;
        jjtThis.isArray = is_array;
        return jjtThis;
    }
}

void Array() #void : {} {
    <ArrayStart> <ArrayEnd>
}

void MainDeclaration() : {} {
    <Static> <Void> <Main> <ParenthesisStart> <TypeString> Array() <Identifier> <ParenthesisEnd>
    <BlockStart>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*
    <BlockEnd>
}

void MethodDeclaration() : {ASTType return_type;} {
    return_type = Type() {jjtThis.returnType = return_type;} <Identifier> <ParenthesisStart> (Arguments())? <ParenthesisEnd>
    <BlockStart>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*
        <Return> Expression() <Semicolon>
    <BlockEnd>
}

void Arguments() : { ASTType temp_type; Token t_temp; } {
    temp_type = Type() {jjtThis.types.add(temp_type);}
    t_temp = <Identifier> {jjtThis.identifiers.add(t_temp.image);}
    (
        <Comma>
        temp_type = Type() {jjtThis.types.add(temp_type);}
        t_temp = <Identifier> {jjtThis.identifiers.add(t_temp.image);}
    )*
}


void Statement() : {} {
    (
          (<BlockStart> (Statement())* <BlockEnd>)
        | (IfStatement())
        | (WhileStatement())
        | (LOOKAHEAD(2) 
              (Expression() <Semicolon>)
            | (IdentifierStatement())
        )
    )    
}

void IfStatement() : {} {
    <If> <ParenthesisStart> Expression() <ParenthesisEnd> 
        Statement() 
    <Else> 
        Statement()
}

void WhileStatement() : {} {
    <While> <ParenthesisStart> 
    
    try {
        (Expression() <ParenthesisEnd>)
    } catch (ParseException e) {
        recover_while_error();
    } 
    
    Statement()
}

void IdentifierStatement() : {} {
    <Identifier>
    (
          (<Equals> Expression() <Semicolon>)
        | (<ArrayStart> Expression() <ArrayEnd> <Equals> Expression() <Semicolon>)
    )
}

void Expression() #void : {} {
    AndExpression()
}

void AndExpression() #void : {} {
    LessThanExpression() (<AndOp> LessThanExpression() #AndExpression(2))*
}

void LessThanExpression() #void : {} {
    AddSubExpression() (<LessThanOp> AddSubExpression() #LessThanExpression(2))*
}

void AddSubExpression() #void : {Token t_op_type;} {
    MultDivExpression() (t_op_type = <AddSubOp> MultDivExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void MultDivExpression() #void : {Token t_op_type;} {
    NotExpression() (t_op_type = <MultDivOp> NotExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void NotExpression() #void : {} {
    (<NotOp> NotExpression() #NotExpression) | (ArrayOrDotExpression())
}

void ArrayOrDotExpression() #void : {} {
    ExpressionTerminals() (ArrayAccessExpression() | DotExpression())*
}

void ArrayAccessExpression() #void : {} {
    (<ArrayStart> Expression() <ArrayEnd> #ArrayAccessExpression(2))
}

void DotExpression() #void : {} {
    (<DotOp> RhsAccessExpression() #DotExpression(2))
}

void RhsAccessExpression() : {} {
      <Length>
    | (<Identifier> <ParenthesisStart> (ExpressionList())? <ParenthesisEnd>)
}

void ExpressionList() : {} {
    Expression() (<Comma> Expression())*
}

void ExpressionTerminals() #void : {Token t_value;} {
      SimpleExpressionTerminal()
    | NewExpression()
    | ParenthesisExpression()
}

void SimpleExpressionTerminal() : {Token t_value;} {
    (t_value = <IntegerLiteral>
    | t_value = <True>
    | t_value = <False>
    | t_value = <Identifier>
    | t_value = <This>)

    {jjtThis.value = t_value.image;}
}

void NewExpression() : {} {
    <New> (
          (<TypeInt> <ArrayStart> Expression() <ArrayEnd>)
        | (<Identifier> <ParenthesisStart> <ParenthesisEnd>)
    )
}

void ParenthesisExpression() : {} {
    <ParenthesisStart> Expression() <ParenthesisEnd>
}