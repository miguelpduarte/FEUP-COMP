options{
    MULTI=true;
    LOOKAHEAD=1;
}

PARSER_BEGIN(JMMParser)

public class JMMParser {
    public static void main(String args[]) throws ParseException {
        JMMParser parser = new JMMParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
    }
}

PARSER_END(JMMParser)

JAVACODE
void error_skipto(int kind) {
    ParseException e = generateParseException();
    System.out.println(e.toString()); 
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);
}

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

TOKEN :
{
    <IntegerLiteral:
          <DecimalLiteral> (["l","L"])?
        | <HexLiteral> (["l","L"])?
        | <OctalLiteral> (["l","L"])? >
    | <#DecimalLiteral: <NonZeroDigit> (<Digit>)* >
    | <#HexLiteral: "0" ["x","X"] (<HexDigit>)+ >
    | <#OctalLiteral: "0" (<OctalDigit>)* >

    | <#Digit: ["0" - "9"]>
    | <#HexDigit: ["0"-"9","a"-"f","A"-"F"]>
    | <#OctalDigit: ["0"-"7"]>
    | <#NonZeroDigit: ["1" - "9"]>
    | <Operation: ("&&" | "<" | "+" | "-" | "*" | "/") >

    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <TypeString: "String" >
    | <Class: "class" >
    | <Generalization: "extends" >
    | <Public: "public" >
    | <Static: "static" >
    | <Void: "void" >
    | <Main: "main" >
    | <Return: "return" >
    | <Length: "length" >
    | <True: "true" >
    | <False: "false" >
    | <This: "this" >
    | <New: "new" >
    | <If: "if" >
    | <Else: "else" >
    | <While: "while" >

    | <Identifier: <FullAlpha> (<FullAlpha> | <Digit>)* >
    | <#FullAlpha: (<Alpha> | "_" | "$") >
    | <#Alpha: (<LowerCase> | <UpperCase>) >
    | <#LowerCase: ["a"-"z"] >
    | <#UpperCase: ["A"-"Z"] >

    | <BlockStart: "{" >
    | <BlockEnd: "}" >
    | <ParenthesisStart: "(" >
    | <ParenthesisEnd: ")" >
    | <ArrayStart: "[" >
    | <ArrayEnd: "]" >    
    | <Semicolon: ";" >
    | <Comma: "," >
    | <Dot: "." >
    | <ExclamationMark: "!" >
    | <Equals: "=" >

}

SimpleNode Program() : {} {
    ClassDeclaration()
    <EOF>
    { return jjtThis; }
}

void VarDeclaration() : {} {
    Type() <Identifier> <Semicolon>
}

void ClassDeclaration() : {Token t_id;} {
    <Class> t_id = <Identifier> {jjtThis.identifier = t_id.image;} (ClassGeneralization())?
    <BlockStart>
        ClassBody()
    <BlockEnd>
}

void ClassGeneralization() : {} {
    <Generalization> <Identifier>
}

void ClassBody() : {} {
    (VarDeclaration())*
    (<Public> (MainDeclaration() | MethodDeclaration()))*
}

void Type() : {} {
    (
          (<TypeInt> (Array())? )
        | <TypeBoolean>
        | <Identifier>
    )
}

void Array() : {} {
    <ArrayStart> <ArrayEnd>
}

void MainDeclaration() : {} {
    <Static> <Void> <Main> <ParenthesisStart> <TypeString> Array() <Identifier> <ParenthesisEnd>
    <BlockStart>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*
    <BlockEnd>
}

void MethodDeclaration() : {} {
    Type() <Identifier> <ParenthesisStart> (Arguments())? <ParenthesisEnd>
    <BlockStart>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*
        <Return> Expression() <Semicolon>
    <BlockEnd>
}

void Arguments() : {} {
    Type() <Identifier> (<Comma> Type() <Identifier>)*
}

void Expression() : {} {
    (
          <IntegerLiteral>
        | <True> 
        | <False>
        | <Identifier>
        | <This>
        | ExpressionNew()
        | (<ExclamationMark> Expression())
        | (<ParenthesisStart> Expression() <ParenthesisEnd>)
    )
    ExpressionLinha()
}

void ExpressionLinha() #Expression : {} {
      (<Operation> Expression() ExpressionLinha())
    | (<ArrayStart> Expression() <ArrayEnd> ExpressionLinha())
    | (ExpressionDot() ExpressionLinha())
    | {}
}

void ExpressionNew() : {} {
    <New> 
    ( 
          (<TypeInt> <ArrayStart> Expression() <ArrayEnd>)
        | (<Identifier> <ParenthesisStart> <ParenthesisEnd>)
    )
}

void ExpressionDot() : {} {
    <Dot>
    (
        (<Length>)
      | (<Identifier> <ParenthesisStart> (ExpressionList())? <ParenthesisEnd>)
    )
}

void ExpressionList() : {} {
    Expression() (<Comma> Expression())*
}

void Statement() : {} {
    (
          (<BlockStart> Statement() <BlockEnd>)
        | (IfStatement())
        | (WhileStatement())
        | (LOOKAHEAD(2) 
              (Expression() <Semicolon>)
            | (IdentifierStatement())
        )
    )    
}

void IfStatement() : {} {
    <If> <ParenthesisStart> Expression() <ParenthesisEnd> 
        Statement() 
    <Else> 
        Statement()
}

void WhileStatement() : {} {
    <While> <ParenthesisStart> 
    
    try {
        (Expression() <ParenthesisEnd>)
    } catch (ParseException e) {
        error_skipto(ParenthesisEnd);
    } 
    
    Statement()
}

void IdentifierStatement() : {} {
    <Identifier>
    (
          (<Equals> Expression() <Semicolon>)
        | (<ArrayStart> Expression() <ArrayEnd> <Equals> Expression() <Semicolon>)
    )
}