options {
    MULTI=true;
    LOOKAHEAD=1;
}

PARSER_BEGIN(JMMParser)

public class JMMParser {
    public static int n_errors = 0;

    public static void main(String args[]) throws ParseException {
        JMMParser parser = new JMMParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
    }
}

PARSER_END(JMMParser)

JAVACODE
void recover_while_error() throws ErrorLimitReached {
    if (JMMParser.n_errors >= 10) {
        throw new ErrorLimitReached();
    }

    System.out.printf("Error #%d: ", ++JMMParser.n_errors);
    ParseException e = generateParseException();
    System.out.println(e.toString());

    int n_skipped_chars = 0;

    Token t;
    //skip tokens until first parenthesis is reacherd 
    do {
        t = getNextToken();
        ++n_skipped_chars;
    } while (t.kind != ParenthesisEnd);

    //skip extra parenthesis
    while (getToken(1).kind == ParenthesisEnd) {
        t = getNextToken();
        ++n_skipped_chars;
    }

    System.out.printf("Number of skipped characters to recover from error: %d\n\n", n_skipped_chars);
}

SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : MULTILINE_COMMENT_STATE
}

<MULTILINE_COMMENT_STATE> SKIP :
{
      < "*/" > : DEFAULT
    | < ~[] >
}

TOKEN :
{
    <IntegerLiteral:
          <DecimalLiteral> (["l","L"])?
        | <HexLiteral> (["l","L"])?
        | <OctalLiteral> (["l","L"])?
    >
    | <#DecimalLiteral: <NonZeroDigit> (<Digit>)* >
    | <#HexLiteral: "0" ["x","X"] (<HexDigit>)+ >
    | <#OctalLiteral: "0" (<OctalDigit>)* >

    | <#Digit: ["0" - "9"] >
    | <#HexDigit: ["0"-"9","a"-"f","A"-"F"] >
    | <#OctalDigit: ["0"-"7"] >
    | <#NonZeroDigit: ["1" - "9"] >

    | <AndOp: "&&" >
    | <LessThanOp: "<" >
    | <AddSubOp: ("+" | "-") >
    | <MultDivOp: ("*" | "/") >
    | <NotOp: "!" >
    | <DotOp: "." >

    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <TypeString: "String" >
    | <Class: "class" >
    | <Generalization: "extends" >
    | <Public: "public" >
    | <Static: "static" >
    | <Void: "void" >
    | <Main: "main" >
    | <Return: "return" >
    | <Length: "length" >
    | <True: "true" >
    | <False: "false" >
    | <This: "this" >
    | <New: "new" >
    | <If: "if" >
    | <Else: "else" >
    | <While: "while" >

    | <Identifier: <FullAlpha> (<FullAlpha> | <Digit>)* >
    | <#FullAlpha: (<Alpha> | "_" | "$") >
    | <#Alpha: (<LowerCase> | <UpperCase>) >
    | <#LowerCase: ["a"-"z"] >
    | <#UpperCase: ["A"-"Z"] >

    | <BlockStart: "{" >
    | <BlockEnd: "}" >
    | <ParenthesisStart: "(" >
    | <ParenthesisEnd: ")" >
    | <ArrayStart: "[" >
    | <ArrayEnd: "]" >    
    | <Semicolon: ";" >
    | <Comma: "," >
    | <Equals: "=" >
}

SimpleNode Program() : {} {
    ClassDeclaration()
    <EOF>
    { return jjtThis; }
}

void VarDeclaration() : {Token t_name;} {
    Type() t_name = <Identifier> <Semicolon>
    {
        jjtThis.identifier = t_name.image;
    }
}

void ClassDeclaration() : {Token t_name;} {
    <Class> t_name = <Identifier> {jjtThis.name = t_name.image;} (ClassGeneralization())?
    <BlockStart>
        ClassBody()
    <BlockEnd>
}

void ClassGeneralization() : {Token t_name;} {
    <Generalization> t_name = <Identifier>
    {
        jjtThis.name = t_name.image;
    }
}

void ClassBody() #void : {int n_fields = 0, n_methods = 0;} {
    ((VarDeclaration() {n_fields++;})* #ClassFields(n_fields))
    ((<Public> (MainDeclaration() {n_methods++;} | MethodDeclaration(){n_methods++;}))* #ClassMethods(n_methods))
}

void Type() : {Token t_type; boolean is_array = false;} {
    (
          (t_type = <TypeInt> (Array(){is_array = true;})?)
        | t_type = <TypeBoolean>
        | t_type = <Identifier>
    )
    {
        jjtThis.type = t_type.image;
        jjtThis.isArray = is_array;
    }
}

void Array() #void : {} {
    <ArrayStart> <ArrayEnd>
}

void MainDeclaration() : {} {
    <Static> <Void> <Main> <ParenthesisStart> <TypeString> Array() <Identifier> <ParenthesisEnd>
    <BlockStart>
        VarsAndBody()
    <BlockEnd>
}

void MethodDeclaration() : {Token t_name;} {
    Type() t_name = <Identifier> {jjtThis.name = t_name.image;} <ParenthesisStart> (MethodParameters())? <ParenthesisEnd>
    <BlockStart>
        VarsAndBody()
        (<Return> Expression() #Return(1)) <Semicolon>
    <BlockEnd>
}

void VarsAndBody() #void : {} {
    (VarDeclaration() | Statement())*
}

void MethodParameters() : { Token t_parameter_name; } {
    Type()
    (t_parameter_name = <Identifier> {jjtThis.name = t_parameter_name.image;} #MethodParameter(1))
    (
        <Comma>
        Type()
        (t_parameter_name = <Identifier> {jjtThis.name = t_parameter_name.image;} #MethodParameter(1))
    )*
}

void Statement() #void : {} {
    (
          (<BlockStart> (Statement())* <BlockEnd>)
        | (IfStatement())
        | (WhileStatement())
        | (Expression() (Assignment())? <Semicolon>)
    )    
}

void IfStatement() : {} {
    <If> <ParenthesisStart> Expression() <ParenthesisEnd> 
        (Statement() #IfBody)
    <Else>
        (Statement() #ElseBody)
}

void WhileStatement() : {} {
    <While> <ParenthesisStart> 
    
    try {
        (Expression() <ParenthesisEnd>)
    } catch (ParseException e) {
        recover_while_error();
    } 
    
    (Statement() #WhileBody)
}

void Assignment() #void : {} {
    (<Equals> Expression() #AssignmentStatement(2))
}

void Expression() #void : {} {
    AndExpression()
}

void AndExpression() #void : {} {
    LessThanExpression() (<AndOp> LessThanExpression() #AndExpression(2))*
}

void LessThanExpression() #void : {} {
    AddSubExpression() (<LessThanOp> AddSubExpression() #LessThanExpression(2))*
}

void AddSubExpression() #void : {Token t_op_type;} {
    MultDivExpression() (t_op_type = <AddSubOp> MultDivExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void MultDivExpression() #void : {Token t_op_type;} {
    NotExpression() (t_op_type = <MultDivOp> NotExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void NotExpression() #void : {} {
    (<NotOp> NotExpression() #NotExpression) | (ArrayOrDotExpression())
}

void ArrayOrDotExpression() #void : {} {
    ExpressionTerminals() (ArrayAccessExpression() | DotExpression())*
}

void ArrayAccessExpression() #void : {} {
    (<ArrayStart> Expression() <ArrayEnd> #ArrayAccessExpression(2))
}

void DotExpression() #void : {} {
    (<DotOp> RhsAccessExpression() #DotExpression(2))
}

void RhsAccessExpression() #void : {Token t_method_call_id; int n_arguments = 0;} {
      <Length> #Length //This or just have a SimpleExpressionTerminal with the value of "length"?
    | (t_method_call_id = <Identifier> <ParenthesisStart> (n_arguments = ExpressionList())? <ParenthesisEnd> { jjtThis.identifier = t_method_call_id.image; }#MethodCall(n_arguments))
}

int ExpressionList() #void : {int n_expr = 1;} {
    Expression() (<Comma> Expression() {n_expr++;})*
    {return n_expr;}
}

void ExpressionTerminals() #void : {Token t_value;} {
      SimpleExpressionTerminal()
    | NewExpression()
    | ParenthesisExpression()
}

void SimpleExpressionTerminal() : {Token t_value;} {
    (t_value = <IntegerLiteral>
    | t_value = <True>
    | t_value = <False>
    | t_value = <Identifier>
    | t_value = <This>)

    {jjtThis.value = t_value.image;}
}

void NewExpression() #void : {Token t_type;} {
    <New> (
          (<TypeInt> <ArrayStart> {jjtThis.type = "int"; jjtThis.isArray = true;}#Type Expression() <ArrayEnd> #NewExpression(2))
        | (t_type = <Identifier> {jjtThis.type = t_type.image; jjtThis.isArray = false;}#Type <ParenthesisStart> <ParenthesisEnd> #NewExpression(1))
    )
}

void ParenthesisExpression() #void : {} {
    <ParenthesisStart> Expression() <ParenthesisEnd>
}





void ExpressionWithoutStartingIdentifier() #void : {} {
    AndExpressionWithoutStartingIdentifier()
}

void AndExpressionWithoutStartingIdentifier() #void : {} {
    LessThanExpressionWithoutStartingIdentifier() (<AndOp> LessThanExpression() #AndExpression(2))*
}

void LessThanExpressionWithoutStartingIdentifier() #void : {} {
    AddSubExpressionWithoutStartingIdentifier() (<LessThanOp> AddSubExpression() #LessThanExpression(2))*
}

void AddSubExpressionWithoutStartingIdentifier() #void : {Token t_op_type;} {
    MultDivExpressionWithoutStartingIdentifier() (t_op_type = <AddSubOp> MultDivExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void MultDivExpressionWithoutStartingIdentifier() #void : {Token t_op_type;} {
    NotExpressionWithoutStartingIdentifier() (t_op_type = <MultDivOp> NotExpression() {jjtThis.operation = t_op_type.image;}#ArithmeticExpression(2))*
}

void NotExpressionWithoutStartingIdentifier() #void : {} {
    (<NotOp> NotExpression() #NotExpression) | (ArrayOrDotExpressionWithoutStartingIdentifier())
}

void ArrayOrDotExpressionWithoutStartingIdentifier() #void : {} {
    ExpressionTerminalsWithoutStartingIdentifier() (ArrayAccessExpression() | DotExpression())*
}

void ExpressionTerminalsWithoutStartingIdentifier() #void : {Token t_value;} {
      SimpleExpressionTerminalWithoutStartingIdentifier()
    | NewExpression()
    | ParenthesisExpression()
}

void SimpleExpressionTerminalWithoutStartingIdentifier() : {Token t_value;} {
    (t_value = <IntegerLiteral>
    | t_value = <True>
    | t_value = <False>
    | t_value = <This>)

    {jjtThis.value = t_value.image;}
}