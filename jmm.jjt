PARSER_BEGIN(JMMParser)

// código Java que invoca o parser
public class JMMParser {
    public static void main(String args[]) throws ParseException {
        // criação do objecto utilizando o constructor com argumento para
        // ler do standard input (teclado)
        JMMParser parser = new JMMParser(System.in);
        parser.Start();
    }
}

PARSER_END(JMMParser)

SKIP :
{
    " " | "\t" | "\r"
}

TOKEN :
{
      <Integer: ("-")? (<Digit>)+>
    | <#Digit: ["0" - "9"]>
    | <OP: ("+" | "-") >
    | <LF: "\n">

    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <Class: "class" >
    | <Generalization: "extends" >
    
    | <Identifier: <FullAlpha> (<FullAlpha> | <Digit>)* >
    | <#FullAlpha: (<Alpha> | "_" | "$") >
    | <#Alpha: (<LowerCase> | <UpperCase>) >
    | <#LowerCase: ["a"-"z"] >
    | <#UpperCase: ["A"-"Z"] >

    | <BlockStart: "{" >
    | <BlockEnd: "}" >

}

void Start() : {} {
    (
          ClassDeclaration()
        | VarDeclaration()
    )
    <LF>
}

void VarDeclaration() : {} {
    Type() <Identifier> ";"
}

void ClassDeclaration() : {} {
    <Class> <Identifier> (ClassGeneralization())? 
        (ClassBody())?
    ";"
}

void ClassGeneralization() : {} {
    <Generalization> <Identifier>
}

void ClassBody() : {} {
    <BlockStart>
        (VarDeclaration())*
    <BlockEnd>
}

void Type() : {} {
    (
          (<TypeInt> (Array())? )
        | <TypeBoolean>
        | <Identifier>
    )
}

void Array() : {} {
    "[" "]"
}