/* Generated By:JJTree: Do not edit this line. ASTMethodDeclaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMethodDeclaration extends MethodDeclarationNode {
  public ASTMethodDeclaration(int id) {
    super(id);
  }

  public ASTMethodDeclaration(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  protected void buildSymbolTable() {
    // 0 - return type (ASTType)
    // 1 - ASTParameters node with ASTParameter children
    // 2 or more - var declarations, iterate and check if they are var decl -> registerInSymbolTable
    for (int i = 2; i < children.length; ++i) {
      if (children[i] instanceof DeclarationNode) {
        this.registerInSymbolTable(children[i]);
      } else {
        // The declarations are all sequential in the start of the method code
        break;
      }
    }
  }

  @Override
  public void prepareInternalInfo() {
    // TODO
    // 0 - return type (ASTType)
    // 1 - ASTParameters node with ASTParameter children
    // 2 or more - var declarations, iterate and check if they are var decl
  }

  @Override
  public ASTType[] getArguments() {
    // TODO
    return null;
  }

  @Override
  public ASTType getReturn() {
    // TODO
    return null;
  }
}
/* JavaCC - OriginalChecksum=3d0bb6bccafce97c55dc7c526183eb43 (do not edit this line) */
