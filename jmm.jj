/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
               
    LOOKAHEAD=1;
    STATIC=false;
                         
}

PARSER_BEGIN(JMMParser)

public class JMMParser/*@bgen(jjtree)*/implements JMMParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJMMParserState jjtree = new JJTJMMParserState();

/*@egen*/
    public static int n_errors = 0;

    public static void main(String args[]) throws ParseException {
        JMMParser parser = new JMMParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
        System.out.println("\\\\-----------//");
        root.createSymbolTables("");
        root.dumpSymbolTable("");
        root.semanticAnalysis();
    }

    public static VariableType class_type;

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).setLine(getToken(1).beginLine);
    }

    void jjtreeCloseNodeScope(Node n) {
        if (n instanceof ASTClassDeclaration) {
            JMMParser.class_type = new VariableType(((ASTClassDeclaration) n).getClassName());
        }
    }
}

PARSER_END(JMMParser)

JAVACODE
void recover_while_error() throws ErrorLimitReached {/*@bgen(jjtree) recover_while_error */
 ASTrecover_while_error jjtn000 = new ASTrecover_while_error(JJTRECOVER_WHILE_ERROR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
 try {
/*@egen*/
    if (JMMParser.n_errors >= 10) {
        throw new ErrorLimitReached();
    }

    System.out.printf("Error #%d: ", ++JMMParser.n_errors);
    ParseException e = generateParseException();
    System.out.println(e.toString());

    int n_skipped_chars = 0;

    Token t;
    //skip tokens until first parenthesis is reacherd 
    do {
        t = getNextToken();
        ++n_skipped_chars;
    } while (t.kind != ParenthesisEnd);

    //skip extra parenthesis
    while (getToken(1).kind == ParenthesisEnd) {
        t = getNextToken();
        ++n_skipped_chars;
    }

    System.out.printf("Number of skipped characters to recover from error: %d\n\n", n_skipped_chars);/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof ErrorLimitReached) {
     throw (ErrorLimitReached)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
 }
/*@egen*/
}

SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : MULTILINE_COMMENT_STATE
}

<MULTILINE_COMMENT_STATE> SKIP :
{
      < "*/" > : DEFAULT
    | < ~[] >
}

TOKEN :
{
    <IntegerLiteral:
          <DecimalLiteral> (["l","L"])?
        | <HexLiteral> (["l","L"])?
        | <OctalLiteral> (["l","L"])?
    >
    | <#DecimalLiteral: <NonZeroDigit> (<Digit>)* >
    | <#HexLiteral: "0" ["x","X"] (<HexDigit>)+ >
    | <#OctalLiteral: "0" (<OctalDigit>)* >

    | <#Digit: ["0" - "9"] >
    | <#HexDigit: ["0"-"9","a"-"f","A"-"F"] >
    | <#OctalDigit: ["0"-"7"] >
    | <#NonZeroDigit: ["1" - "9"] >

    | <AndOp: "&&" >
    | <LessThanOp: "<" >
    | <AddSubOp: ("+" | "-") >
    | <MultDivOp: ("*" | "/") >
    | <NotOp: "!" >
    | <DotOp: "." >

    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <TypeString: "String" >
    | <Class: "class" >
    | <Generalization: "extends" >
    | <Public: "public" >
    | <Static: "static" >
    | <Void: "void" >
    | <Main: "main" >
    | <Return: "return" >
    | <Length: "length" >
    | <True: "true" >
    | <False: "false" >
    | <This: "this" >
    | <New: "new" >
    | <If: "if" >
    | <Else: "else" >
    | <While: "while" >

    | <Identifier: <FullAlpha> (<FullAlpha> | <Digit>)* >
    | <#FullAlpha: (<Alpha> | "_" | "$") >
    | <#Alpha: (<LowerCase> | <UpperCase>) >
    | <#LowerCase: ["a"-"z"] >
    | <#UpperCase: ["A"-"Z"] >

    | <BlockStart: "{" >
    | <BlockEnd: "}" >
    | <ParenthesisStart: "(" >
    | <ParenthesisEnd: ")" >
    | <ArrayStart: "[" >
    | <ArrayEnd: "]" >    
    | <Semicolon: ";" >
    | <Comma: "," >
    | <Equals: "=" >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ClassDeclaration()
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_name;} {/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() t_name = <Identifier> <Semicolon>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        jjtn000.identifier = t_name.image;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_name;} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <Class> t_name = <Identifier> {jjtn000.name = t_name.image;} (ClassGeneralization())?
    <BlockStart>
        ClassBody()
    <BlockEnd>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void ClassGeneralization() : {/*@bgen(jjtree) ClassGeneralization */
                              ASTClassGeneralization jjtn000 = new ASTClassGeneralization(JJTCLASSGENERALIZATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
                              jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_name;} {/*@bgen(jjtree) ClassGeneralization */
    try {
/*@egen*/
    <Generalization> t_name = <Identifier>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        jjtn000.name = t_name.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void ClassBody()       : {int n_fields = 0, n_methods = 0;} {
    (/*@bgen(jjtree) #ClassFields( n_fields) */
     {
       ASTClassFields jjtn001 = new ASTClassFields(JJTCLASSFIELDS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
     }
     try {
/*@egen*/(VarDeclaration() {n_fields++;})*/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  n_fields);
         jjtreeCloseNodeScope(jjtn001);
       }
     }
/*@egen*/                       )
    (/*@bgen(jjtree) #ClassMethods( n_methods) */
     {
       ASTClassMethods jjtn002 = new ASTClassMethods(JJTCLASSMETHODS);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtreeOpenNodeScope(jjtn002);
     }
     try {
/*@egen*/(<Public> (MainDeclaration() {n_methods++;} | MethodDeclaration(){n_methods++;}))*/*@bgen(jjtree)*/
     } catch (Throwable jjte002) {
       if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         throw (RuntimeException)jjte002;
       }
       if (jjte002 instanceof ParseException) {
         throw (ParseException)jjte002;
       }
       throw (Error)jjte002;
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002,  n_methods);
         jjtreeCloseNodeScope(jjtn002);
       }
     }
/*@egen*/                         )
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_type; boolean is_array = false;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (
          (t_type = <TypeInt> (Array(){is_array = true;})?)
        | t_type = <TypeBoolean>
        | t_type = <Identifier>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        jjtn000.type = t_type.image;
        jjtn000.isArray = is_array;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Array()       : {} {
    <ArrayStart> <ArrayEnd>
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
                          ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_arg_name;} {/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <Static> <Void> <Main> <ParenthesisStart> <TypeString> Array() t_arg_name = <Identifier> {jjtn000.arg_name = t_arg_name.image;} <ParenthesisEnd>
    <BlockStart>
        VarsAndBody()
    <BlockEnd>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t_name;} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    Type() t_name = <Identifier> {jjtn000.name = t_name.image;} <ParenthesisStart> MethodParameters() <ParenthesisEnd>
    <BlockStart>
        VarsAndBody()
        (<Return>/*@bgen(jjtree) #Return( 1) */
                  {
                    ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  1);
                      jjtreeCloseNodeScope(jjtn001);
                    }
                  }
/*@egen*/           ) <Semicolon>
    <BlockEnd>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void VarsAndBody()       : {} {
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void MethodParameters() : {/*@bgen(jjtree) MethodParameters */
                            ASTMethodParameters jjtn000 = new ASTMethodParameters(JJTMETHODPARAMETERS);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t_parameter_name; } {/*@bgen(jjtree) MethodParameters */
    try {
/*@egen*/
    (Type()
    (t_parameter_name = <Identifier>/*@bgen(jjtree) #MethodParameter( 1) */
                                     {
                                       ASTMethodParameter jjtn001 = new ASTMethodParameter(JJTMETHODPARAMETER);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
/*@egen*/ {jjtn001.name = t_parameter_name.image;}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/                    )
    (
        <Comma>
        Type()
        (t_parameter_name = <Identifier>/*@bgen(jjtree) #MethodParameter( 1) */
                                         {
                                           ASTMethodParameter jjtn002 = new ASTMethodParameter(JJTMETHODPARAMETER);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtreeOpenNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                           jjtc002 = false;
                                           jjtreeCloseNodeScope(jjtn002);
                                         }
/*@egen*/ {jjtn002.name = t_parameter_name.image;}/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  1);
                                             jjtreeCloseNodeScope(jjtn002);
                                           }
                                         }
/*@egen*/                    )
    )*)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


void Statement()       : {} {
    (
          (<BlockStart> (Statement())* <BlockEnd>)
        | (IfStatement())
        | (WhileStatement())
        | (Expression() (Assignment())? <Semicolon>)
    )    
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    <If> <ParenthesisStart> Expression() <ParenthesisEnd> 
        (/*@bgen(jjtree) IfBody */
         {
           ASTIfBody jjtn001 = new ASTIfBody(JJTIFBODY);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/Statement()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/        )
    <Else>
        (/*@bgen(jjtree) ElseBody */
         {
           ASTElseBody jjtn002 = new ASTElseBody(JJTELSEBODY);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
         }
         try {
/*@egen*/Statement()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtreeCloseNodeScope(jjtn002);
           }
         }
/*@egen*/          )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    <While> <ParenthesisStart> 
    
    try {
        (Expression() <ParenthesisEnd>)
    } catch (ParseException e) {
        recover_while_error();
    } 
    
    (/*@bgen(jjtree) WhileBody */
     {
       ASTWhileBody jjtn001 = new ASTWhileBody(JJTWHILEBODY);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
     }
     try {
/*@egen*/Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtreeCloseNodeScope(jjtn001);
       }
     }
/*@egen*/           )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Assignment()       : {} {
    (<Equals>/*@bgen(jjtree) #AssignmentStatement( 2) */
              {
                ASTAssignmentStatement jjtn001 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
              }
              try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
              }
/*@egen*/                        )
}

void Expression()       : {} {
    AndExpression()
}

void AndExpression()       : {} {
    LessThanExpression() (<AndOp>/*@bgen(jjtree) #AndExpression( 2) */
                                  {
                                    ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ LessThanExpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/                  )*
}

void LessThanExpression()       : {} {
    AddSubExpression() (<LessThanOp>/*@bgen(jjtree) #LessThanExpression( 2) */
                                     {
                                       ASTLessThanExpression jjtn001 = new ASTLessThanExpression(JJTLESSTHANEXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ AddSubExpression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/                       )*
}

void AddSubExpression()       : {Token t_op_type;} {
    MultDivExpression() (t_op_type = <AddSubOp> MultDivExpression()/*@bgen(jjtree) #ArithmeticExpression( 2) */
                                                                    {
                                                                      ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                      jjtreeOpenNodeScope(jjtn001);
                                                                    }
                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                      jjtc001 = false;
                                                                      jjtreeCloseNodeScope(jjtn001);
                                                                    }
/*@egen*/ {jjtn001.operation = t_op_type.image;}/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                        jjtreeCloseNodeScope(jjtn001);
                                                                      }
                                                                    }
/*@egen*/                        )*
}

void MultDivExpression()       : {Token t_op_type;} {
    NotExpression() (t_op_type = <MultDivOp> NotExpression()/*@bgen(jjtree) #ArithmeticExpression( 2) */
                                                             {
                                                               ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
                                                               jjtreeOpenNodeScope(jjtn001);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                               jjtc001 = false;
                                                               jjtreeCloseNodeScope(jjtn001);
                                                             }
/*@egen*/ {jjtn001.operation = t_op_type.image;}/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                 jjtreeCloseNodeScope(jjtn001);
                                                               }
                                                             }
/*@egen*/                        )*
}

void NotExpression()       : {} {
    (<NotOp>/*@bgen(jjtree) NotExpression */
             {
               ASTNotExpression jjtn001 = new ASTNotExpression(JJTNOTEXPRESSION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ NotExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/               ) | (ArrayOrDotExpression())
}

void ArrayOrDotExpression()       : {} {
    ExpressionTerminals() (ArrayAccessExpression() | DotExpression())*
}

void ArrayAccessExpression()       : {} {
    (<ArrayStart> Expression()/*@bgen(jjtree) #ArrayAccessExpression( 2) */
                               {
                                 ASTArrayAccessExpression jjtn001 = new ASTArrayAccessExpression(JJTARRAYACCESSEXPRESSION);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ <ArrayEnd>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
                               }
/*@egen*/                          )
}

void DotExpression()       : {} {
    (<DotOp>/*@bgen(jjtree) #DotExpression( 2) */
             {
               ASTDotExpression jjtn001 = new ASTDotExpression(JJTDOTEXPRESSION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ RhsAccessExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/                  )
}

void RhsAccessExpression()       : {Token t_method_call_id; int n_arguments = 0;} {/*@bgen(jjtree) Length */
      {
        ASTLength jjtn001 = new ASTLength(JJTLENGTH);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/
      <Length>/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/        
    | (t_method_call_id = <Identifier> <ParenthesisStart> (n_arguments = ExpressionList())? <ParenthesisEnd>/*@bgen(jjtree) #MethodCall( n_arguments) */
                                                                                                             {
                                                                                                               ASTMethodCall jjtn002 = new ASTMethodCall(JJTMETHODCALL);
                                                                                                               boolean jjtc002 = true;
                                                                                                               jjtree.openNodeScope(jjtn002);
                                                                                                               jjtreeOpenNodeScope(jjtn002);
                                                                                                             }
                                                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn002,  n_arguments);
                                                                                                               jjtc002 = false;
                                                                                                               jjtreeCloseNodeScope(jjtn002);
                                                                                                             }
/*@egen*/ { jjtn002.identifier = t_method_call_id.image; }/*@bgen(jjtree)*/
                                                                                                             } finally {
                                                                                                               if (jjtc002) {
                                                                                                                 jjtree.closeNodeScope(jjtn002,  n_arguments);
                                                                                                                 jjtreeCloseNodeScope(jjtn002);
                                                                                                               }
                                                                                                             }
/*@egen*/                        )
}

int ExpressionList()       : {int n_expr = 1;} {
    Expression() (<Comma> Expression() {n_expr++;})*
    {return n_expr;}
}

void ExpressionTerminals()       : {Token t_value;} {
      SimpleExpressionTerminal()
    | NewExpression()
    | ParenthesisExpression()
}

void SimpleExpressionTerminal()       : {Token t_value;} {
    (t_value = <IntegerLiteral>/*@bgen(jjtree) IntegerLiteral */
                               {
                                 ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtreeCloseNodeScope(jjtn001);
                               }
/*@egen*/{jjtn001.value = t_value.image;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
                               }
/*@egen*/               
    | t_value = <True>/*@bgen(jjtree) Boolean */
                        {
                          ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                          jjtreeOpenNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtreeCloseNodeScope(jjtn002);
                        }
/*@egen*/  {jjtn002.value = t_value.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtreeCloseNodeScope(jjtn002);
                          }
                        }
/*@egen*/        
    | t_value = <False>/*@bgen(jjtree) Boolean */
                        {
                          ASTBoolean jjtn003 = new ASTBoolean(JJTBOOLEAN);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtreeOpenNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                          jjtreeCloseNodeScope(jjtn003);
                        }
/*@egen*/ {jjtn003.value = t_value.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtreeCloseNodeScope(jjtn003);
                          }
                        }
/*@egen*/        
    | t_value = <Identifier>/*@bgen(jjtree) Identifier */
                             {
                               ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
                               jjtreeOpenNodeScope(jjtn004);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn004, true);
                               jjtc004 = false;
                               jjtreeCloseNodeScope(jjtn004);
                             }
/*@egen*/ {jjtn004.value = t_value.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004, true);
                                 jjtreeCloseNodeScope(jjtn004);
                               }
                             }
/*@egen*/           
    |/*@bgen(jjtree) This */
      {
        ASTThis jjtn005 = new ASTThis(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        jjtreeOpenNodeScope(jjtn005);
      }
      try {
/*@egen*/ t_value = <This>/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
          jjtreeCloseNodeScope(jjtn005);
        }
      }
/*@egen*/      )
}

void NewExpression()       : {Token t_type;} {
    <New> (
          (<TypeInt> <ArrayStart>/*@bgen(jjtree) Type */
                                  {
                                    ASTType jjtn001 = new ASTType(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
/*@egen*/ {jjtn001.type = "int"; jjtn001.isArray = true;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/      Expression()/*@bgen(jjtree) #NewExpression( 2) */
                                                                                                    {
                                                                                                      ASTNewExpression jjtn002 = new ASTNewExpression(JJTNEWEXPRESSION);
                                                                                                      boolean jjtc002 = true;
                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                      jjtreeOpenNodeScope(jjtn002);
                                                                                                    }
                                                                                                    try {
/*@egen*/ <ArrayEnd>/*@bgen(jjtree)*/
                                                                                                    } finally {
                                                                                                      if (jjtc002) {
                                                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                                                        jjtreeCloseNodeScope(jjtn002);
                                                                                                      }
                                                                                                    }
/*@egen*/                  )
        | (t_type = <Identifier>/*@bgen(jjtree) Type */
                                 {
                                   ASTType jjtn003 = new ASTType(JJTTYPE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                   jjtreeOpenNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn003, true);
                                   jjtc003 = false;
                                   jjtreeCloseNodeScope(jjtn003);
                                 }
/*@egen*/ {jjtn003.type = t_type.image; jjtn003.isArray = false;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                     jjtreeCloseNodeScope(jjtn003);
                                   }
                                 }
/*@egen*/      <ParenthesisStart>/*@bgen(jjtree) #NewExpression( 1) */
                                                                                                                 {
                                                                                                                   ASTNewExpression jjtn004 = new ASTNewExpression(JJTNEWEXPRESSION);
                                                                                                                   boolean jjtc004 = true;
                                                                                                                   jjtree.openNodeScope(jjtn004);
                                                                                                                   jjtreeOpenNodeScope(jjtn004);
                                                                                                                 }
                                                                                                                 try {
/*@egen*/ <ParenthesisEnd>/*@bgen(jjtree)*/
                                                                                                                 } finally {
                                                                                                                   if (jjtc004) {
                                                                                                                     jjtree.closeNodeScope(jjtn004,  1);
                                                                                                                     jjtreeCloseNodeScope(jjtn004);
                                                                                                                   }
                                                                                                                 }
/*@egen*/                  )
    )
}

void ParenthesisExpression()       : {} {
    <ParenthesisStart> Expression() <ParenthesisEnd>
}