/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTIdentifier extends SimpleNode implements Typed {
  protected String value;
  private Variable variable;

  public ASTIdentifier(int id) {
    super(id);
  }

  public ASTIdentifier(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return this.value;
  }

  public Variable getVariable() {
    return variable;
  }

  @Override
  public VariableType getType() {
    return variable.getType();
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {    
    Variable v = SymbolTableScopes.getInstance().isDeclared(this.scope_identifier, this.value);
    Node parent = this.jjtGetParent();
    if (v == null) {
      if (parent != null && parent instanceof ASTDotExpression) {
        this.variable = new Variable(new VariableType(VariableType.ignored_type, this.value), new VariableIdentifier(""));
        return;
      }
      throw new SemanticError(this.line, String.format("Using undeclared variable '%s'.", this.value));
    }

    this.variable = v;

    if (parent != null && parent instanceof ASTAssignmentStatement) {
      return;
    }

    if (!v.isInitialized()) {
      throw new SemanticError(this.line, String.format("Using variable '%s' before initialization.", this.value));
    }
  }

  @Override
  protected void calculateStackImpact() {
    Node parent = this.jjtGetParent();
    if (parent != null && parent instanceof ASTAssignmentStatement && ((ASTAssignmentStatement) parent).isLHS(this)) {
      // This node is left hand side of an assignment, thus the store instruction will be done in the assignment node to ensure correct order
      // The above was tested by instead adding the store instruction here -> it is, in fact, true: the instruction must be in ASTAssignmentStatement
      return;
    }

    // Otherwise, load the variable onto the stack
    // (Only if it is not of ignored type (static references))
    if (!this.variable.getType().isIgnored()) {
      MethodStackSizeScopes.getInstance().getMethodScope(this.scope_identifier).impactStack(1);
    }
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    Node parent = this.jjtGetParent();
    if (parent instanceof Supressable && ((Supressable) parent).isSupressed()) {
      // Do not generate code if the parent node was supressed
      return;
    }

    // Check if this node is not the left-hand side of an assignment
    
    if (parent instanceof ASTAssignmentStatement && ((ASTAssignmentStatement) parent).isLHS(this)) {
      // This node is left hand side of an assignment, thus the store instruction will be done in the assignment node to ensure correct order
      // The above was tested by instead adding the store instruction here -> it is, in fact, true: the instruction must be in ASTAssignmentStatement
      return;
    }

    // Otherwise, load the variable onto the stack
    // (Only if it is not of ignored type (static references)) -> Must test this more thoroughly
    if (!this.variable.getType().isIgnored()) {
      sb.append(this.variable.toJasminLoad());
    }
  }
}
/*
 * JavaCC - OriginalChecksum=534021caa2c544cea987828b4185652b (do not edit this
 * line)
 */
