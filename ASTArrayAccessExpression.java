/* Generated By:JJTree: Do not edit this line. ASTArrayAccessExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArrayAccessExpression extends SimpleNode implements Typed {
  private VariableType type;

  public ASTArrayAccessExpression(int id) {
    super(id);
  }

  public ASTArrayAccessExpression(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return "[]";
  }

  @Override
  public VariableType getType() {
    return type;
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {
    VariableType lhs = ((Typed) children[0]).getType();
    VariableType rhs = ((Typed) children[1]).getType();

    if (!((lhs.isIntArray() || lhs.isIgnored()) && (rhs.isInt() || rhs.isIgnored()))) {
      throw new SemanticError(this.line, String.format("Invalid operand types %s and %s for operator []", lhs, rhs));
    }

    // Calculate own type
    this.type = new VariableType("int");
  }
  
  @Override
  protected void calculateStackImpact() {
    if (parent != null && parent instanceof ASTAssignmentStatement && ((ASTAssignmentStatement) parent).isLHS(this)) {
      // This node is left hand side of an assignment, thus the store instruction will be done in the assignment node to ensure correct order
      // The above was tested by instead adding the store instruction here -> it is, in fact, true: the instruction must be in ASTAssignmentStatement
      return;
    }
    // Stack impact of -1 (removes two and inserts one)
    MethodStackSizeScopes.getInstance().getMethodScope(this.scope_identifier).impactStack(-1);
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    // Check if this node is not the left-hand side of an assignment
    
    Node parent = this.jjtGetParent();
    if (parent != null && parent instanceof ASTAssignmentStatement && ((ASTAssignmentStatement) parent).isLHS(this)) {
      // This node is left hand side of an assignment, thus the store instruction will be done in the assignment node to ensure correct order
      // The above was tested by instead adding the store instruction here -> it is, in fact, true: the instruction must be in ASTAssignmentStatement
      return;
    }

    // Otherwise, load the variable onto the stack
    // (No need to calculate the value of the expression that is the argument of the array access because that will be done by the generated code)
    // (No need to get the arrayref as well because that will be done by the ASTIdentifier children node)
    sb.append("\tiaload\n");
  }
}
/* JavaCC - OriginalChecksum=dec61186312bf09145e85ad0c72a13a7 (do not edit this line) */
