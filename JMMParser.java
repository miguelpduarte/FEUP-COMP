/* Generated By:JJTree&JavaCC: Do not edit this line. JMMParser.java */
public class JMMParser/*@bgen(jjtree)*/implements JMMParserTreeConstants, JMMParserConstants {/*@bgen(jjtree)*/
  protected JJTJMMParserState jjtree = new JJTJMMParserState();public static int n_errors = 0;

    public static void main(String args[]) throws ParseException {
        JMMParser parser = new JMMParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
        System.out.println("\u005c\u005c\u005c\u005c-----------//");
        root.createSymbolTables("");
        root.dumpSymbolTable("");
        root.semanticAnalysis();
    }

    public static VariableType class_type;

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).setLine(getToken(1).beginLine);
    }

    void jjtreeCloseNodeScope(Node n) {
        if (n instanceof ASTClassDeclaration) {
            JMMParser.class_type = new VariableType(((ASTClassDeclaration) n).getClassName());
        }
    }

  void recover_while_error() throws ParseException, ErrorLimitReached {
                                                     /*@bgen(jjtree) recover_while_error */
 ASTrecover_while_error jjtn000 = new ASTrecover_while_error(JJTRECOVER_WHILE_ERROR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
 try {if (JMMParser.n_errors >= 10) {
        throw new ErrorLimitReached();
    }

    System.out.printf("Error #%d: ", ++JMMParser.n_errors);
    ParseException e = generateParseException();
    System.out.println(e.toString());

    int n_skipped_chars = 0;

    Token t;
    //skip tokens until first parenthesis is reacherd 
    do {
        t = getNextToken();
        ++n_skipped_chars;
    } while (t.kind != ParenthesisEnd);

    //skip extra parenthesis
    while (getToken(1).kind == ParenthesisEnd) {
        t = getNextToken();
        ++n_skipped_chars;
    }

    System.out.printf("Number of skipped characters to recover from error: %d\u005cn\u005cn", n_skipped_chars);/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof ErrorLimitReached) {
     throw (ErrorLimitReached)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
 }
  }

  final public SimpleNode Program() throws ParseException {
                        /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void VarDeclaration() throws ParseException {
                         /*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtreeOpenNodeScope(jjtn000);Token t_name;
    try {
      Type();
      t_name = jj_consume_token(Identifier);
      jj_consume_token(Semicolon);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.identifier = t_name.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ClassDeclaration() throws ParseException {
                           /*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtreeOpenNodeScope(jjtn000);Token t_name;
    try {
      jj_consume_token(Class);
      t_name = jj_consume_token(Identifier);
                                   jjtn000.name = t_name.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Generalization:
        ClassGeneralization();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(BlockStart);
      ClassBody();
      jj_consume_token(BlockEnd);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ClassGeneralization() throws ParseException {
                              /*@bgen(jjtree) ClassGeneralization */
                              ASTClassGeneralization jjtn000 = new ASTClassGeneralization(JJTCLASSGENERALIZATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
                              jjtreeOpenNodeScope(jjtn000);Token t_name;
    try {
      jj_consume_token(Generalization);
      t_name = jj_consume_token(Identifier);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.name = t_name.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ClassBody() throws ParseException {
                          int n_fields = 0, n_methods = 0;
       ASTClassFields jjtn001 = new ASTClassFields(JJTCLASSFIELDS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TypeInt:
        case TypeBoolean:
        case Identifier:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
                        n_fields++;
      }
    } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
    } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  n_fields);
         jjtreeCloseNodeScope(jjtn001);
       }
    }
       ASTClassMethods jjtn002 = new ASTClassMethods(JJTCLASSMETHODS);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtreeOpenNodeScope(jjtn002);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Public:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(Public);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Static:
          MainDeclaration();
                                   n_methods++;
          break;
        case TypeInt:
        case TypeBoolean:
        case Identifier:
          MethodDeclaration();
                                                                       n_methods++;
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte002) {
       if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte002;}
       }
       if (jjte002 instanceof ParseException) {
         {if (true) throw (ParseException)jjte002;}
       }
       {if (true) throw (Error)jjte002;}
    } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002,  n_methods);
         jjtreeCloseNodeScope(jjtn002);
       }
    }
  }

  final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtreeOpenNodeScope(jjtn000);Token t_type; boolean is_array = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TypeInt:
        t_type = jj_consume_token(TypeInt);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ArrayStart:
          Array();
                                       is_array = true;
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case TypeBoolean:
        t_type = jj_consume_token(TypeBoolean);
        break;
      case Identifier:
        t_type = jj_consume_token(Identifier);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.type = t_type.image;
        jjtn000.isArray = is_array;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Array() throws ParseException {
    jj_consume_token(ArrayStart);
    jj_consume_token(ArrayEnd);
  }

  final public void MainDeclaration() throws ParseException {
                          /*@bgen(jjtree) MainDeclaration */
                          ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);Token t_arg_name;
    try {
      jj_consume_token(Static);
      jj_consume_token(Void);
      jj_consume_token(Main);
      jj_consume_token(ParenthesisStart);
      jj_consume_token(TypeString);
      Array();
      t_arg_name = jj_consume_token(Identifier);
                                                                                              jjtn000.arg_name = t_arg_name.image;
      jj_consume_token(ParenthesisEnd);
      jj_consume_token(BlockStart);
      VarsAndBody();
      jj_consume_token(BlockEnd);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void MethodDeclaration() throws ParseException {
                            /*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtreeOpenNodeScope(jjtn000);Token t_name;
    try {
      Type();
      t_name = jj_consume_token(Identifier);
                                  jjtn000.name = t_name.image;
      jj_consume_token(ParenthesisStart);
      MethodParameters();
      jj_consume_token(ParenthesisEnd);
      jj_consume_token(BlockStart);
      VarsAndBody();
      jj_consume_token(Return);
                    ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  1);
                      jjtreeCloseNodeScope(jjtn001);
                    }
      }
      jj_consume_token(Semicolon);
      jj_consume_token(BlockEnd);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void VarsAndBody() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      VarDeclaration();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IntegerLiteral:
      case NotOp:
      case True:
      case False:
      case This:
      case New:
      case If:
      case While:
      case Identifier:
      case BlockStart:
      case ParenthesisStart:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Statement();
    }
  }

  final public void MethodParameters() throws ParseException {
                           /*@bgen(jjtree) MethodParameters */
                            ASTMethodParameters jjtn000 = new ASTMethodParameters(JJTMETHODPARAMETERS);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtreeOpenNodeScope(jjtn000);Token t_parameter_name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TypeInt:
      case TypeBoolean:
      case Identifier:
        Type();
        t_parameter_name = jj_consume_token(Identifier);
                                       ASTMethodParameter jjtn001 = new ASTMethodParameter(JJTMETHODPARAMETER);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
        try {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                       jjtreeCloseNodeScope(jjtn001);
                                      jjtn001.name = t_parameter_name.image;
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Comma:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(Comma);
          Type();
          t_parameter_name = jj_consume_token(Identifier);
                                           ASTMethodParameter jjtn002 = new ASTMethodParameter(JJTMETHODPARAMETER);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtreeOpenNodeScope(jjtn002);
          try {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                           jjtc002 = false;
                                           jjtreeCloseNodeScope(jjtn002);
                                          jjtn002.name = t_parameter_name.image;
          } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  1);
                                             jjtreeCloseNodeScope(jjtn002);
                                           }
          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BlockStart:
      jj_consume_token(BlockStart);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IntegerLiteral:
        case NotOp:
        case True:
        case False:
        case This:
        case New:
        case If:
        case While:
        case Identifier:
        case BlockStart:
        case ParenthesisStart:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(BlockEnd);
      break;
    case If:
      IfStatement();
      break;
    case While:
      WhileStatement();
      break;
    case IntegerLiteral:
    case NotOp:
    case True:
    case False:
    case This:
    case New:
    case Identifier:
    case ParenthesisStart:
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Equals:
        Assignment();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(Semicolon);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
                      /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(If);
      jj_consume_token(ParenthesisStart);
      Expression();
      jj_consume_token(ParenthesisEnd);
           ASTIfBody jjtn001 = new ASTIfBody(JJTIFBODY);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
      try {
        Statement();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
      }
      jj_consume_token(Else);
           ASTElseBody jjtn002 = new ASTElseBody(JJTELSEBODY);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
      } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtreeCloseNodeScope(jjtn002);
           }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void WhileStatement() throws ParseException {
                         /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(While);
      jj_consume_token(ParenthesisStart);
      try {
        Expression();
        jj_consume_token(ParenthesisEnd);
      } catch (ParseException e) {
        recover_while_error();
      }
       ASTWhileBody jjtn001 = new ASTWhileBody(JJTWHILEBODY);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
      try {
        Statement();
      } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtreeCloseNodeScope(jjtn001);
       }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Assignment() throws ParseException {
    jj_consume_token(Equals);
                ASTAssignmentStatement jjtn001 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
    try {
      Expression();
    } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
    }
  }

  final public void Expression() throws ParseException {
    AndExpression();
  }

  final public void AndExpression() throws ParseException {
    LessThanExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AndOp:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(AndOp);
                                    ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
      try {
        LessThanExpression();
      } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
      }
    }
  }

  final public void LessThanExpression() throws ParseException {
    AddSubExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LessThanOp:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      jj_consume_token(LessThanOp);
                                       ASTLessThanExpression jjtn001 = new ASTLessThanExpression(JJTLESSTHANEXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
      try {
        AddSubExpression();
      } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
      }
    }
  }

  final public void AddSubExpression() throws ParseException {
                                 Token t_op_type;
    MultDivExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AddSubOp:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      t_op_type = jj_consume_token(AddSubOp);
      MultDivExpression();
                                                                      ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                      jjtreeOpenNodeScope(jjtn001);
      try {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                      jjtc001 = false;
                                                                      jjtreeCloseNodeScope(jjtn001);
                                                                     jjtn001.operation = t_op_type.image;
      } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                        jjtreeCloseNodeScope(jjtn001);
                                                                      }
      }
    }
  }

  final public void MultDivExpression() throws ParseException {
                                  Token t_op_type;
    NotExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MultDivOp:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      t_op_type = jj_consume_token(MultDivOp);
      NotExpression();
                                                               ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
                                                               jjtreeOpenNodeScope(jjtn001);
      try {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                               jjtc001 = false;
                                                               jjtreeCloseNodeScope(jjtn001);
                                                              jjtn001.operation = t_op_type.image;
      } finally {
                                                               if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                 jjtreeCloseNodeScope(jjtn001);
                                                               }
      }
    }
  }

  final public void NotExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NotOp:
      jj_consume_token(NotOp);
               ASTNotExpression jjtn001 = new ASTNotExpression(JJTNOTEXPRESSION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
      try {
        NotExpression();
      } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
      }
      break;
    case IntegerLiteral:
    case True:
    case False:
    case This:
    case New:
    case Identifier:
    case ParenthesisStart:
      ArrayOrDotExpression();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayOrDotExpression() throws ParseException {
    ExpressionTerminals();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DotOp:
      case ArrayStart:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ArrayStart:
        ArrayAccessExpression();
        break;
      case DotOp:
        DotExpression();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ArrayAccessExpression() throws ParseException {
    jj_consume_token(ArrayStart);
    Expression();
                                 ASTArrayAccessExpression jjtn001 = new ASTArrayAccessExpression(JJTARRAYACCESSEXPRESSION);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(ArrayEnd);
    } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
    }
  }

  final public void DotExpression() throws ParseException {
    jj_consume_token(DotOp);
               ASTDotExpression jjtn001 = new ASTDotExpression(JJTDOTEXPRESSION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
    try {
      RhsAccessExpression();
    } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
    } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtreeCloseNodeScope(jjtn001);
               }
    }
  }

  final public void RhsAccessExpression() throws ParseException {
                                    Token t_method_call_id; int n_arguments = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Length:
        ASTLength jjtn001 = new ASTLength(JJTLENGTH);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(Length);
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
      break;
    case Identifier:
      t_method_call_id = jj_consume_token(Identifier);
      jj_consume_token(ParenthesisStart);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IntegerLiteral:
      case NotOp:
      case True:
      case False:
      case This:
      case New:
      case Identifier:
      case ParenthesisStart:
        n_arguments = ExpressionList();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(ParenthesisEnd);
                                                                                                               ASTMethodCall jjtn002 = new ASTMethodCall(JJTMETHODCALL);
                                                                                                               boolean jjtc002 = true;
                                                                                                               jjtree.openNodeScope(jjtn002);
                                                                                                               jjtreeOpenNodeScope(jjtn002);
      try {
                                                                                                               jjtree.closeNodeScope(jjtn002,  n_arguments);
                                                                                                               jjtc002 = false;
                                                                                                               jjtreeCloseNodeScope(jjtn002);
                                                                                                               jjtn002.identifier = t_method_call_id.image;
      } finally {
                                                                                                               if (jjtc002) {
                                                                                                                 jjtree.closeNodeScope(jjtn002,  n_arguments);
                                                                                                                 jjtreeCloseNodeScope(jjtn002);
                                                                                                               }
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int ExpressionList() throws ParseException {
                              int n_expr = 1;
    Expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Comma:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_12;
      }
      jj_consume_token(Comma);
      Expression();
                                        n_expr++;
    }
     {if (true) return n_expr;}
    throw new Error("Missing return statement in function");
  }

  final public void ExpressionTerminals() throws ParseException {
                                    Token t_value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case True:
    case False:
    case This:
    case Identifier:
      SimpleExpressionTerminal();
      break;
    case New:
      NewExpression();
      break;
    case ParenthesisStart:
      ParenthesisExpression();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SimpleExpressionTerminal() throws ParseException {
                                         Token t_value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
      t_value = jj_consume_token(IntegerLiteral);
                                 ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
      try {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtreeCloseNodeScope(jjtn001);
                                jjtn001.value = t_value.image;
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
      }
      break;
    case True:
      t_value = jj_consume_token(True);
                          ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                          jjtreeOpenNodeScope(jjtn002);
      try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtreeCloseNodeScope(jjtn002);
                         jjtn002.value = t_value.image;
      } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtreeCloseNodeScope(jjtn002);
                          }
      }
      break;
    case False:
      t_value = jj_consume_token(False);
                          ASTBoolean jjtn003 = new ASTBoolean(JJTBOOLEAN);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtreeOpenNodeScope(jjtn003);
      try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                          jjtreeCloseNodeScope(jjtn003);
                         jjtn003.value = t_value.image;
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtreeCloseNodeScope(jjtn003);
                          }
      }
      break;
    case Identifier:
      t_value = jj_consume_token(Identifier);
                               ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
                               jjtreeOpenNodeScope(jjtn004);
      try {
                               jjtree.closeNodeScope(jjtn004, true);
                               jjtc004 = false;
                               jjtreeCloseNodeScope(jjtn004);
                              jjtn004.value = t_value.image;
      } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004, true);
                                 jjtreeCloseNodeScope(jjtn004);
                               }
      }
      break;
    case This:
        ASTThis jjtn005 = new ASTThis(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        jjtreeOpenNodeScope(jjtn005);
      try {
        t_value = jj_consume_token(This);
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
          jjtreeCloseNodeScope(jjtn005);
        }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NewExpression() throws ParseException {
                              Token t_type;
    jj_consume_token(New);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TypeInt:
      jj_consume_token(TypeInt);
      jj_consume_token(ArrayStart);
                                    ASTType jjtn001 = new ASTType(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
      try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                    jjtreeCloseNodeScope(jjtn001);
                                   jjtn001.type = "int"; jjtn001.isArray = true;
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
      }
      Expression();
                                                                                                      ASTNewExpression jjtn002 = new ASTNewExpression(JJTNEWEXPRESSION);
                                                                                                      boolean jjtc002 = true;
                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                      jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(ArrayEnd);
      } finally {
                                                                                                      if (jjtc002) {
                                                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                                                        jjtreeCloseNodeScope(jjtn002);
                                                                                                      }
      }
      break;
    case Identifier:
      t_type = jj_consume_token(Identifier);
                                   ASTType jjtn003 = new ASTType(JJTTYPE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                   jjtreeOpenNodeScope(jjtn003);
      try {
                                   jjtree.closeNodeScope(jjtn003, true);
                                   jjtc003 = false;
                                   jjtreeCloseNodeScope(jjtn003);
                                  jjtn003.type = t_type.image; jjtn003.isArray = false;
      } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                     jjtreeCloseNodeScope(jjtn003);
                                   }
      }
      jj_consume_token(ParenthesisStart);
                                                                                                                   ASTNewExpression jjtn004 = new ASTNewExpression(JJTNEWEXPRESSION);
                                                                                                                   boolean jjtc004 = true;
                                                                                                                   jjtree.openNodeScope(jjtn004);
                                                                                                                   jjtreeOpenNodeScope(jjtn004);
      try {
        jj_consume_token(ParenthesisEnd);
      } finally {
                                                                                                                   if (jjtc004) {
                                                                                                                     jjtree.closeNodeScope(jjtn004,  1);
                                                                                                                     jjtreeCloseNodeScope(jjtn004);
                                                                                                                   }
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ParenthesisExpression() throws ParseException {
    jj_consume_token(ParenthesisStart);
    Expression();
    jj_consume_token(ParenthesisEnd);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(TypeInt)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(ArrayStart)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JMMParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x1800000,0x10000000,0x21800000,0x0,0x1800000,0x200200,0x0,0x1800000,0x200200,0x0,0x200200,0x20000,0x40000,0x80000,0x100000,0x200200,0x400000,0x400000,0x200200,0x0,0x0,0x200,0x200,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x0,0x200,0x40000,0x200,0x1437c,0x200000,0x200,0x1437c,0x400000,0x1437c,0x0,0x0,0x0,0x0,0x1023c,0x40000,0x40000,0x1023c,0x202,0x200000,0x1023c,0x21c,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JMMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JMMParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JMMParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JMMParser(JMMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JMMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
