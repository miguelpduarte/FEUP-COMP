/* Generated By:JJTree: Do not edit this line. ASTArithmeticExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArithmeticExpression extends SimpleNode implements Typed {
  protected String operation;
  private VariableType type;

  public ASTArithmeticExpression(int id) {
    super(id);
  }

  public ASTArithmeticExpression(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return this.operation;
  }


  @Override
  public VariableType getType() {
    return type;
  }

  @Override
  protected void applySemanticAnalysis() throws SemanticError {
    VariableType lhs = ((Typed) children[0]).getType();
    VariableType rhs = ((Typed) children[1]).getType();
    if (!((lhs.isInt() || lhs.isIgnored()) && (rhs.isInt() || rhs.isIgnored()))) {
      throw new SemanticError(this.line, String.format("Invalid operand types %s and %s for operator %s", lhs, rhs, this.operation));
    }

    // Calculate own type
    this.type = new VariableType("int");
  }

  @Override
  protected void calculateStackImpact() {
    // Stack impact of -1 (removes two and inserts one)
    MethodStackSizeScopes.getInstance().getMethodScope(this.scope_identifier).impactStack(-1);
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    // execute operation
    if (operation.equals("+")) {
      sb.append("\tiadd\n");
    } else if (operation.equals("-")) {
      sb.append("\tisub\n");
    } else if (operation.equals("*")) {
      sb.append("\timul\n");
    } else if (operation.equals("/")) {
      sb.append("\tidiv\n");
    }
  }
}
/* JavaCC - OriginalChecksum=8f9b4fed618a844c012461a6669090fa (do not edit this line) */
