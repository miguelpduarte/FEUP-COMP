/* Generated By:JJTree: Do not edit this line. ASTIntegerLiteral.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTIntegerLiteral extends SimpleNode implements Typed{
  protected String value;
  private static final VariableType type = new VariableType("int");

  public ASTIntegerLiteral(int id) {
    super(id);
  }

  public ASTIntegerLiteral(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return this.value;
  }

  @Override
  public VariableType getType() {
    return type;
  }

  @Override
  protected void calculateStackImpact() {
    MethodStackSizeScopes.getInstance().getMethodScope(this.scope_identifier).impactStack(1);
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    // put value in stack
    final int value = Integer.parseInt(this.value);
    if (value < 6) {
      sb.append("\ticonst_").append(this.value).append("\n");
    } else if (value < 128) {
      sb.append("\tbipush ").append(this.value).append("\n");
    } else if (value < 32768) {
      sb.append("\tsipush ").append(this.value).append("\n");
    } else {
      sb.append("\tldc ").append(this.value).append("\n");
    }
  }
}
/*
 * JavaCC - OriginalChecksum=4a43e323f6d0e970615023842b59d2d8 (do not edit this
 * line)
 */
