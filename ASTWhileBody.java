/* Generated By:JJTree: Do not edit this line. ASTWhileBody.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTWhileBody extends SimpleNode {
  public ASTWhileBody(int id) {
    super(id);
  }

  public ASTWhileBody(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return "body";
  }

  @Override
  protected void calculateStackImpactNodeOpen() {
    MethodStackSizeScopes.getInstance().getMethodScope(this.scope_identifier).impactStack(-1);
  }

  @Override
  protected void generateCodeNodeOpen(StringBuilder sb) {
    ASTWhileStatement while_parent = (ASTWhileStatement) this.jjtGetParent();
    sb.append("\tifeq ").append(while_parent.getEndLoopLabel()).append("\n");

    if (while_parent.shouldOptimize()) {
      // Optimized template for simple expressions
      sb.append(while_parent.getLoopLabel()).append(":\n");
    }
  }

  @Override
  protected void generateCodeNodeClose(StringBuilder sb) {
    ASTWhileStatement while_parent = (ASTWhileStatement) this.jjtGetParent();
    if (!while_parent.shouldOptimize()) {
      // Regular template
      sb.append("\tgoto ").append(while_parent.getLoopLabel()).append("\n");
    } else {
      // Optimized template for simple expressions
      while_parent.generateConditionNodeCode(sb);
      sb.append("\tifne ").append(while_parent.getLoopLabel()).append("\n");
    }
  }
}
/* JavaCC - OriginalChecksum=a372a0b2f522b0fb66f679bbe3a0d54e (do not edit this line) */
