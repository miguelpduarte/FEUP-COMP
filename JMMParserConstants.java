/* Generated By:JJTree&JavaCC: Do not edit this line. JMMParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JMMParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IntegerLiteral = 9;
  /** RegularExpression Id. */
  int DecimalLiteral = 10;
  /** RegularExpression Id. */
  int HexLiteral = 11;
  /** RegularExpression Id. */
  int OctalLiteral = 12;
  /** RegularExpression Id. */
  int Digit = 13;
  /** RegularExpression Id. */
  int HexDigit = 14;
  /** RegularExpression Id. */
  int OctalDigit = 15;
  /** RegularExpression Id. */
  int NonZeroDigit = 16;
  /** RegularExpression Id. */
  int AndOp = 17;
  /** RegularExpression Id. */
  int LessThanOp = 18;
  /** RegularExpression Id. */
  int AddSubOp = 19;
  /** RegularExpression Id. */
  int MultDivOp = 20;
  /** RegularExpression Id. */
  int NotOp = 21;
  /** RegularExpression Id. */
  int DotOp = 22;
  /** RegularExpression Id. */
  int TypeInt = 23;
  /** RegularExpression Id. */
  int TypeBoolean = 24;
  /** RegularExpression Id. */
  int TypeString = 25;
  /** RegularExpression Id. */
  int Class = 26;
  /** RegularExpression Id. */
  int Generalization = 27;
  /** RegularExpression Id. */
  int Public = 28;
  /** RegularExpression Id. */
  int Static = 29;
  /** RegularExpression Id. */
  int Void = 30;
  /** RegularExpression Id. */
  int Main = 31;
  /** RegularExpression Id. */
  int Return = 32;
  /** RegularExpression Id. */
  int Length = 33;
  /** RegularExpression Id. */
  int True = 34;
  /** RegularExpression Id. */
  int False = 35;
  /** RegularExpression Id. */
  int This = 36;
  /** RegularExpression Id. */
  int New = 37;
  /** RegularExpression Id. */
  int If = 38;
  /** RegularExpression Id. */
  int Else = 39;
  /** RegularExpression Id. */
  int While = 40;
  /** RegularExpression Id. */
  int Identifier = 41;
  /** RegularExpression Id. */
  int FullAlpha = 42;
  /** RegularExpression Id. */
  int Alpha = 43;
  /** RegularExpression Id. */
  int LowerCase = 44;
  /** RegularExpression Id. */
  int UpperCase = 45;
  /** RegularExpression Id. */
  int BlockStart = 46;
  /** RegularExpression Id. */
  int BlockEnd = 47;
  /** RegularExpression Id. */
  int ParenthesisStart = 48;
  /** RegularExpression Id. */
  int ParenthesisEnd = 49;
  /** RegularExpression Id. */
  int ArrayStart = 50;
  /** RegularExpression Id. */
  int ArrayEnd = 51;
  /** RegularExpression Id. */
  int Semicolon = 52;
  /** RegularExpression Id. */
  int Comma = 53;
  /** RegularExpression Id. */
  int Equals = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTILINE_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<IntegerLiteral>",
    "<DecimalLiteral>",
    "<HexLiteral>",
    "<OctalLiteral>",
    "<Digit>",
    "<HexDigit>",
    "<OctalDigit>",
    "<NonZeroDigit>",
    "\"&&\"",
    "\"<\"",
    "<AddSubOp>",
    "<MultDivOp>",
    "\"!\"",
    "\".\"",
    "\"int\"",
    "\"boolean\"",
    "\"String\"",
    "\"class\"",
    "\"extends\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"return\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "<Identifier>",
    "<FullAlpha>",
    "<Alpha>",
    "<LowerCase>",
    "<UpperCase>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"=\"",
  };

}
