/* Generated By:JJTree: Do not edit this line. ASTDotExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTDotExpression extends SimpleNode {
  public ASTDotExpression(int id) {
    super(id);
  }

  public ASTDotExpression(JMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String getNodeName() {
    return ".";
  }

  @Override
  protected void applySemanticAnalysis() {
    if (!(children[0] instanceof ASTSimpleExpressionTerminal)) {
      System.out.printf("Error in line %d -> dot operator used on a non-simple expression terminal!\n", this.line);
      return;
    }

    final SimpleNode lhs = (SimpleNode) children[0];

    // TODO: Make this less ugly
    final String lhs_str = lhs.getNodeName();
    // the other possible values are either an identifier or 'this' - ideally the condition would be inverted but identifiers are unpredictable unless regex is used
    // other than that, a different type of node should be created ideally, which would avoid this as it would be solved with one or two instanceof(s)
    if (lhs_str == "true" || lhs_str == "false" || lhs_str.matches("-?\\d+")) {
      System.out.printf("Error in line %d -> dot operator used on a non-identifier expression '%s'\n", this.line, lhs_str);
    }
  }
}
/* JavaCC - OriginalChecksum=9e551656e978f3b2ea8f9c6934c8e272 (do not edit this line) */
